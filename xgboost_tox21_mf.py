# -*- coding: utf-8 -*-
"""XGBoost_Tox21_MF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zGijdWsLmS1US1PTa0QhcjWjJVfgylAf
"""

pip install rdkit -q

# import libraries
import pandas as pd
import numpy as np
from rdkit import Chem
from rdkit.Chem import AllChem
from rdkit.Chem import QED

# importing data
df = pd.read_csv("/content/drive/MyDrive/tox21.csv")
df.head()

# getting smiles
smiles = df["smiles"]
smiles

# getting morgan fingerprint
mol = [Chem.MolFromSmiles(i) for i in smiles]
mol
mf_all = []
n = 7831
for i in range(n):
  mf = AllChem.GetMorganFingerprintAsBitVect(mol[i],2,nBits=2048)
  mf_all.append(mf)

# morgan fingerprints
mf_ = np.array(mf_all)
print(mf_)
print(mf_.shape)

# qed score
qed_all=[]
n=7831
for i in range(0,n):
  qed_sc = QED.qed(mol[i])
  qed_all.append(qed_sc)
qed_ = np.array(qed_all)
print(qed_)
print(qed_.shape)
df['QED Score'] = qed_
df.head()

# extracting features
X = mf_
y = df["QED Score"]
print(X.shape, y.shape)

# train test split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2 , random_state=42)
print(X_train.shape, X_test.shape, y_test.shape, y_test.shape)

# xgboost
from xgboost import XGBRegressor
model = XGBRegressor() # all are default parameters
model.fit(X_train, y_train)

# making prediction on test data
y_test_pred = model.predict(X_test)
print(y_test_pred)

# evaluating the performance on test data
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
r2 = r2_score(y_test, y_test_pred)
print("R-squared value is:",r2)
mse = mean_squared_error(y_test, y_test_pred)
print("Root Mean Squared Error is :", np.sqrt(mse))
mae = mean_absolute_error(y_test, y_test_pred)
print("Mean Absolute Error is:", mae)

# plotting the performance of the test data
import matplotlib.pyplot as plt
plt.scatter(y_test, y_test_pred)
plt.xlabel("Actual Values of QED Score")
plt.ylabel("Predicted Values of QED Score")
plt.title("Actual vs Predicted Values of QED Score")
coeff = np.polyfit(y_test, y_test_pred,1)
poly = np.poly1d(coeff)
x_trend = np.linspace(y_test.min(), y_test.max(),100)
y_trend = poly(x_trend)
plt.plot(x_trend, y_trend, color='red')
plt.text(0.7,0.0,f'$R^2 = {r2:.3f}$', fontsize=12, color='red')
plt.show()

# making prediction on train data
y_train_pred = model.predict(X_train)
print(y_train_pred)

# evaluating the performance on train data
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error
r2_t = r2_score(y_train, y_train_pred)
print("R-squared value is:",r2_t)
mse = mean_squared_error(y_train, y_train_pred)
print("Root Mean Squared Error is :", np.sqrt(mse))
mae = mean_absolute_error(y_train, y_train_pred)
print("Mean Absolute Error is:", mae)

# plotting the performance of the train data
import matplotlib.pyplot as plt
plt.scatter(y_train, y_train_pred)
plt.xlabel("Actual Values of QED Score")
plt.ylabel("Predicted Values of QED Score")
plt.title("Actual vs Predicted Values of QED Score")
coeff = np.polyfit(y_train, y_train_pred,1)
poly = np.poly1d(coeff)
x_trend = np.linspace(y_train.min(), y_train.max(),100)
y_trend = poly(x_trend)
plt.plot(x_trend, y_trend, color='red')
plt.text(0.7,0.1,f'$R^2 = {r2_t:.3f}$', fontsize=12, color='red')
plt.show()